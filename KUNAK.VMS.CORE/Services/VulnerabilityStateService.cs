using KUNAK.VMS.CORE.CustomEntities;
using KUNAK.VMS.CORE.Entities;
using KUNAK.VMS.CORE.Interfaces;
using KUNAK.VMS.CORE.QueryFilters;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KUNAK.VMS.CORE.Services
{
    public class VulnerabilityStateService : IVulnerabilityStateService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly PaginationOptions _paginationOptions;
        public VulnerabilityStateService(IUnitOfWork unitOfWork, IOptions<PaginationOptions> options)
        {
            _unitOfWork = unitOfWork;
            _paginationOptions = options.Value;
        }
        public PagedList<VulnerabilityState> GetVulnerabilityStates(VulnerabilityStateQueryFilter filters)
        {
            filters.Page = filters.Page == 0 ? _paginationOptions.DefaultPageNumber : filters.Page;
            filters.Size = filters.Size == 0 ? _paginationOptions.DefaultPageSize : filters.Size;
            var vulnerabilityStates = _unitOfWork.VulnerabilityStateRepository.GetAll();
            var pagedassets = PagedList<VulnerabilityState>.Create(vulnerabilityStates, filters.Page, filters.Size);
            return pagedassets;
        }
        public Task<VulnerabilityState> GetVulnerabilityState(int id)
        {
            return _unitOfWork.VulnerabilityStateRepository.GetById(id);
        }
        public async Task InsertVulnerabilityState(VulnerabilityState vulnerabilityState)
        {
            await _unitOfWork.VulnerabilityStateRepository.Add(vulnerabilityState);
            await _unitOfWork.SaveChangesAsync();
        }
        public async Task UpdateVulnerabilityState(VulnerabilityState vulnerabilityState)
        {
            _unitOfWork.VulnerabilityStateRepository.Update(vulnerabilityState);
            await _unitOfWork.SaveChangesAsync();
        }
        public async Task<bool> DeleteVulnerabilityState(int id)
        {
            await _unitOfWork.VulnerabilityStateRepository.Delete(id);
            await _unitOfWork.SaveChangesAsync();
            return true;
        }
    }
}
