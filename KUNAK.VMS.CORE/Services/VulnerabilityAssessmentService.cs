using KUNAK.VMS.CORE.CustomEntities;
using KUNAK.VMS.CORE.Entities;
using KUNAK.VMS.CORE.Exceptions;
using KUNAK.VMS.CORE.Interfaces;
using KUNAK.VMS.CORE.QueryFilters;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KUNAK.VMS.CORE.Services
{
    public class VulnerabilityAssessmentService : IVulnerabilityAssessmentService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly PaginationOptions _paginationOptions;

        public VulnerabilityAssessmentService(IUnitOfWork unitOfWork, IOptions<PaginationOptions> options)
        {
            _unitOfWork = unitOfWork;
            _paginationOptions = options.Value;
        }
        public PagedList<VulnerabilityAssessment> GetVulnerabilityAssessments(VulnerabilityAssessmentQueryFilter filters)
        {
            filters.Page = filters.Page == 0 ? _paginationOptions.DefaultPageNumber : filters.Page;
            filters.Size = filters.Size == 0 ? _paginationOptions.DefaultPageSize : filters.Size;
            var vulnerabilityAssessments = _unitOfWork.VulnerabilityAssessmentRepository.GetAll();
            var pagedvulnerabilityAssessments = PagedList<VulnerabilityAssessment>.Create(vulnerabilityAssessments, filters.Page, filters.Size);
            return pagedvulnerabilityAssessments;
        }
        public Task<VulnerabilityAssessment> GetVulnerabilityAssessment(int id)
        {
            return _unitOfWork.VulnerabilityAssessmentRepository.GetById(id);
        }
        public async Task InsertVulnerabilityAssessment(VulnerabilityAssessment vulnerabilityAssessment)
        {
            await _unitOfWork.VulnerabilityAssessmentRepository.Add(vulnerabilityAssessment);
            await _unitOfWork.SaveChangesAsync();
        }
        public async Task UpdateVulnerabilityAssessment(VulnerabilityAssessment vulnerabilityAssessment)
        {
            //Eliminar metodologìas relacionadas a la revisión
            _unitOfWork.VulnerabilityAssessmentHasMethodologyRepository.DeleteByIdVulnerabilityAssessment
                (vulnerabilityAssessment.IdVulnerabilityAssessment);
            //Editamos
            _unitOfWork.VulnerabilityAssessmentRepository.Update(vulnerabilityAssessment);
            await _unitOfWork.SaveChangesAsync();
            // scopes and scope_detail

            //Verificamos cuáles de los scope se van a eliminar
            foreach (var scope in vulnerabilityAssessment.Scopes)
            {
                if (scope.Status==false)
                {
                    //Eliminamos todos los detalles con el idScope
                    _unitOfWork.ScopeDetailRepository.DeleteByIdScope(scope.IdScope);
                    //Eliminamos el scope
                    _unitOfWork.ScopeRepository.Delete(scope.IdScope);
                }
                else
                {
                    //Verificamos los detalles que se van a eliminar
                    foreach (var scopeDetail in scope.ScopeDetails)
                    {
                        if (scopeDetail.Status==false)
                        {
                            _unitOfWork.ScopeDetailRepository.Delete(scopeDetail.IdScopeDetail);
                        }
                    }
                }
            }
            await _unitOfWork.SaveChangesAsync();
        }
        public async Task<bool> DeleteVulnerabilityAssessment(int id)
        {
            var vulnerabilityAssessmentDetails=_unitOfWork.VulnerabilityAssessmentDetailRepository
                .GetVulnerabilityAssessmentDetails(id);
            if (vulnerabilityAssessmentDetails.Any())
            {
                throw new BusinessException("La revisión tiene vulnerabilidades registradas");
            }
            else
            {
                //Eliminar las tablas relacionadas
                //Delete Methodologies
                _unitOfWork.VulnerabilityAssessmentHasMethodologyRepository
                    .DeleteByIdVulnerabilityAssessment(id);
                await _unitOfWork.SaveChangesAsync();
                //Delete Scopes and scopes detail
                var scopes = _unitOfWork.ScopeRepository.GetScopesByIdVulnerabilityAssessment(id).ToList();
                foreach (var scope in scopes)
                {
                    _unitOfWork.ScopeDetailRepository.DeleteByIdScope(scope.IdScope);
                }
                _unitOfWork.ScopeRepository.DeleteByIdVulnerabilityAssessment(id);
                await _unitOfWork.SaveChangesAsync();
                //Delete VulnerabilityAssessment
                await _unitOfWork.VulnerabilityAssessmentRepository.Delete(id);
                await _unitOfWork.SaveChangesAsync();
            }
            return true;
        }


        //-------------------------------------------------

        public PagedList<VulnerabilityAssessment> GetVulnerabilityAssessmentsByIdCompany(VulnerabilityAssessmentQueryFilter filters,int idCompany)
        {
            filters.Page = filters.Page == 0 ? _paginationOptions.DefaultPageNumber : filters.Page;
            filters.Size = filters.Size == 0 ? _paginationOptions.DefaultPageSize : filters.Size;
            var vulnerabilityAssessments = _unitOfWork.VulnerabilityAssessmentRepository.GetVulnerabilityAssessmentsByIdCompany(idCompany);
            var pagedvulnerabilityAssessments = PagedList<VulnerabilityAssessment>.Create(vulnerabilityAssessments, filters.Page, filters.Size);
            return pagedvulnerabilityAssessments;
        }

        public IEnumerable<VulnerabilityAssessment> GetVulnerabilityAssessmentsByIdCompany(int idCompany)
        {
            var vulnerabilityAssessments = _unitOfWork.VulnerabilityAssessmentRepository
                .GetVulnerabilityAssessmentsByIdCompany(idCompany);
            return vulnerabilityAssessments;
        }

        public VulnerabilityAssessment GetVulnerabilityAssessmentDetail(int idVulnerabilityAssessment)
        {
            return _unitOfWork.VulnerabilityAssessmentRepository.GetVulnerabilityAssessmentsDetail(idVulnerabilityAssessment);
        }
    }
}
