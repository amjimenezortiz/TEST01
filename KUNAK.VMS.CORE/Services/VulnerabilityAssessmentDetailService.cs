using KUNAK.VMS.CORE.CustomEntities;
using KUNAK.VMS.CORE.Entities;
using KUNAK.VMS.CORE.Interfaces;
using KUNAK.VMS.CORE.QueryFilters;
using Microsoft.Extensions.Options;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace KUNAK.VMS.CORE.Services
{
    public class VulnerabilityAssessmentDetailService : IVulnerabilityAssessmentDetailService
    {
        private readonly IUnitOfWork _unitOfWork;
        private readonly PaginationOptions _paginationOptions;

        public VulnerabilityAssessmentDetailService(IUnitOfWork unitOfWork, IOptions<PaginationOptions> options)
        {
            _unitOfWork = unitOfWork;
            _paginationOptions = options.Value;
        }
        public PagedList<VulnerabilityAssessmentDetail> GetVulnerabilityAssessmentDetails(VulnerabilityAssessmentDetailQueryFilter filters, int idVulnerabilityAssessment)
        {
            filters.Page = filters.Page == 0 ? _paginationOptions.DefaultPageNumber : filters.Page;
            filters.Size = filters.Size == 0 ? _paginationOptions.DefaultPageSize : filters.Size;
            var vulnerabilityAssessmentDetails = _unitOfWork.VulnerabilityAssessmentDetailRepository
                .GetVulnerabilityAssessmentDetails(idVulnerabilityAssessment);
            var pagedvulnerabilityAssessmentDetails = PagedList<VulnerabilityAssessmentDetail>
                .Create(vulnerabilityAssessmentDetails, filters.Page, filters.Size);
            return pagedvulnerabilityAssessmentDetails;
        }
        public VulnerabilityAssessmentDetail GetVulnerabilityAssessmentDetail(int id)
        {
            return _unitOfWork.VulnerabilityAssessmentDetailRepository.GetVulnerabilityAssessmentDetailById(id);
        }
        public async Task InsertVulnerabilityAssessmentDetail(VulnerabilityAssessmentDetail vulnerabilityAssessmentDetail)
        {
            vulnerabilityAssessmentDetail.CreatedAt = DateTime.Now;
            await _unitOfWork.VulnerabilityAssessmentDetailRepository.Add(vulnerabilityAssessmentDetail);
            await _unitOfWork.SaveChangesAsync();
        }
        public async Task UpdateVulnerabilityAssessmentDetail(VulnerabilityAssessmentDetail vulnerabilityAssessmentDetail)
        {
            _unitOfWork.VulnerabilityAssessmentDetailRepository.Update(vulnerabilityAssessmentDetail);
            await _unitOfWork.SaveChangesAsync();
            //----------------------
        }
        public async Task<bool> DeleteVulnerabilityAssessmentDetail(int id)
        {
            await _unitOfWork.VulnerabilityAssessmentDetailRepository.Delete(id);
            await _unitOfWork.SaveChangesAsync();
            return true;
        }
    }
}
