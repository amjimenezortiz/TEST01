using AutoMapper;
using KUNAK.VMS.API.Responses;
using KUNAK.VMS.CORE.CustomEntities;
using KUNAK.VMS.CORE.DTOs;
using KUNAK.VMS.CORE.Entities;
using KUNAK.VMS.CORE.Interfaces;
using KUNAK.VMS.CORE.QueryFilters;
using KUNAK.VMS.INFRASTRUCTURE.Interfaces;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
namespace KUNAK.VMS.API.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    //[Authorize]
    public class VulnerabilityStateController : ControllerBase
    {
        private readonly IVulnerabilityStateService _vulnerabilityStateService;
        private readonly IMapper _mapper;
        private readonly IUriService _uriService;


        public VulnerabilityStateController(IVulnerabilityStateService vulnerabilityStateService, IMapper mapper, IUriService uriService)
        {
            _vulnerabilityStateService = vulnerabilityStateService;
            _mapper = mapper;
            _uriService = uriService;

        }
        [HttpGet]
        public IActionResult GetVulnerabilityStates([FromQuery] VulnerabilityStateQueryFilter filters)
        {
            try
            {
                //var token = new JwtSecurityTokenHandler().ReadJwtToken(Request.Headers["Authorization"].ToString().Remove(0, 7));

                //if (_validationUserPermissions.RolePermissionValidation(token, _configuration["Permissions:RA_User"].ToString()))
                //{
                var vulnerabilityStates = _vulnerabilityStateService.GetVulnerabilityStates(filters);
                var vulnerabilityStatesDtos = _mapper.Map<IEnumerable<VulnerabilityStateDTO>>(vulnerabilityStates);
                //Front said that they don't need pagination for this CRUD
                var pagination = new Pagination
                {
                    Length = vulnerabilityStates.Length,
                    Size = vulnerabilityStates.Size,
                    Page = vulnerabilityStates.Page,
                    LastPage = vulnerabilityStates.LastPage,
                    StartIndex = vulnerabilityStates.Count == 0 ? 0 : vulnerabilityStates[0].IdVulnerabilityStatus,
                    EndIndex = vulnerabilityStates.Count == 0 ? 0 : vulnerabilityStates[vulnerabilityStates.Count >= vulnerabilityStates.Size ? vulnerabilityStates.Size - 1 : vulnerabilityStates.Count - 1].IdVulnerabilityStatus,
                    HasNextPage = vulnerabilityStates.HasNextPage,
                    HasPreviousPage = vulnerabilityStates.HasPreviousPage,
                    NextPageUrl = _uriService.GetVulnerabilityStatePaginationUri(filters, Url.RouteUrl(nameof(GetVulnerabilityStates))).ToString()
                };
                Response.Headers.Add("X-Pagination", JsonConvert.SerializeObject(pagination));

                var response = new ApiResponse<IEnumerable<VulnerabilityStateDTO>>(vulnerabilityStatesDtos)
                {
                    Pagination = pagination
                };
                return Ok(response);
                //}
                //else
                //{
                //    return BadRequest("No tiene permiso para realizar esta operación");
                //}
            }
            catch (Exception e)
            {
                return BadRequest(e);
            }
        }


        [HttpGet("{id}")]
        public async Task<IActionResult> GetVulnerabilityState(int id)
        {
            var vulnerabilityStates = await _vulnerabilityStateService.GetVulnerabilityState(id);
            var vulnerabilityStatesDto = _mapper.Map<VulnerabilityStateDTO>(vulnerabilityStates);
            return Ok(vulnerabilityStatesDto);
        }

        [HttpPost]
        public async Task<IActionResult> PostVulnerabilityState(VulnerabilityStateDTO vulnerabilityStateDTO)
        {
            try
            {
                var vulnerabilityState = _mapper.Map<VulnerabilityState>(vulnerabilityStateDTO);
                await _vulnerabilityStateService.InsertVulnerabilityState(vulnerabilityState);
                var response = _mapper.Map<VulnerabilityStateDTO>(vulnerabilityState);
                return Ok(response);
            }
            catch (Exception e)
            {
                return BadRequest(e);
            }
        }

        [HttpPut("{id}")]
        public async Task<IActionResult> PutUser(int id, VulnerabilityStateDTO vulnerabilityStateDTO)
        {
            try
            {
                var vulnerabilityState = _mapper.Map<VulnerabilityState>(vulnerabilityStateDTO);
                vulnerabilityState.IdVulnerabilityStatus = id;
                await _vulnerabilityStateService.UpdateVulnerabilityState(vulnerabilityState);
                var vulnerabilityStateEdit = await _vulnerabilityStateService.GetVulnerabilityState(id);
                var response = _mapper.Map<VulnerabilityStateDTO>(vulnerabilityStateEdit);
                return Ok(response);
            }
            catch (Exception e)
            {
                return BadRequest(e);
            }
        }

        [HttpDelete("{id}")]
        public async Task<IActionResult> DeleteVulnerabilityState(int id)
        {
            try
            {
                var result = await _vulnerabilityStateService.DeleteVulnerabilityState(id);
                return Ok(result);
            }
            catch (Exception e)
            {
                return BadRequest(e);
            }
        }
    }
}
